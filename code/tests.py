import unittest
import app

class qrCodeTest(unittest.TestCase):
    def test_boundaries(self):
        actual=app.qrCode(size=(21,21)).generate_boundaries()
        
        expected=[['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@','@']]
        
        self.assertEqual(actual, expected)

    def test_timing_pattern(self):
        actual=app.qrCode(size=(21,21)).draw_timing_pattern()
        
        expected=[['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@',' ','@','@','@','@','@','@','@','@','@','@','@','@','@','@'],
                  ['@','@','@','@','@','@','#','@','@','@','@','@','@','@','@','@','@','@','@','@','@']]

        self.assertEqual(actual, expected)

if __name__ == '__main__':
    unittest.main()