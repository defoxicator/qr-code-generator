import unittest
import app

class UserInputTest(unittest.TestCase):
    def test_analyze_input(self):
        actual=app.UserInput(text_input='Hello, world! 123').analyze_input()
        expected=[
            {'H': '01001000'},
            {'e': '01100101'},
            {'l': '01101100'},
            {'l': '01101100'},
            {'o': '01101111'},
            {',': '00101100'},
            {' ': '00100000'},
            {'w': '01110111'},
            {'o': '01101111'},
            {'r': '01110010'},
            {'l': '01101100'},
            {'d': '01100100'},
            {'!': '00100001'},
            {' ': '00100000'},
            {'1': '00110001'},
            {'2': '00110010'},
            {'3': '00110011'}
        ]

        self.assertEqual(actual, expected)

    def test_input_to_data_bits(self):
        actual=app.UserInput(
            text_input='Hello world!123'
        ).input_to_data_bits()
        expected:str='010010000110010101101100011011000110111100100000011101110110111101110010011011000110010000100001001100010011001000110011'

        self.assertEqual(actual, expected)

class LayoutTest(unittest.TestCase):
    def test_boundaries(self):
        actual=app.Layout(size=21).generate_boundaries()
        expected=[
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@']
        ]
       
        self.assertEqual(actual, expected)

    def test_timing_pattern(self):
        actual=app.Layout(size=21).timing_pattern()
        expected=['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#']

        self.assertEqual(actual, expected)

    def test_draw_timing_pattern(self):
        actual=app.Layout(size=21).draw_timing_pattern()
        expected=[
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@']
        ]

        self.assertEqual(actual, expected)

    def test_one_finding_pattern_top_left(self):
        actual=app.Layout().one_finding_pattern(vertical='top', horizontal='left')
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
        ]
        
        self.assertEqual(actual, expected)

    
    def test_one_finding_pattern_top_right(self):
        actual=app.Layout().one_finding_pattern(
            vertical='top', horizontal='right'
        )
        expected=[
            [' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            [' ', '#', ' ', '#', '#', '#', ' ', '#'],
            [' ', '#', ' ', '#', '#', '#', ' ', '#'],
            [' ', '#', ' ', '#', '#', '#', ' ', '#'],
            [' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            [' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
        ]
        
        self.assertEqual(actual, expected)

    
    def test_one_finding_pattern_bottom_left(self):
        actual=app.Layout().one_finding_pattern(
            vertical='bottom', horizontal='left'
        )
        expected=[
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ']
        ]
        
        self.assertEqual(actual, expected)

    def test_draw_finding_pattern(self):
        actual=app.Layout(size=21).draw_finding_pattern()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '@', '@', '@', '@', '@', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', '@', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@']
        ]

        self.assertEqual(actual, expected)

    def test_draw_dummy_format_bits(self):
        actual=app.Layout(size=21).draw_dummy_format_bits()
        expected=[
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            [' ', ' ', ' ', ' ', ' ', ' ', '@', ' ', ' ', '@', '@', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@']
        ]

        self.assertEqual(actual, expected)

    def test_combine_qr_code_layout(self):
        actual=app.Layout().combine_qr_code_layout()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', '@', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '@', '@', '@', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['@', '@', '@', '@', '@', '@', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@', '@']
        ]

        self.assertEqual(actual, expected)

class testQrCode(unittest.TestCase):
    def test_concatenate_data(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low').concatenate_data(encoding_type='byte')
        expected:str='01000001000101001000011001010110110001101100011011110010110000100000011101110110111101110010011011000110010000100001001000000011000100110010001100110000'

        self.assertEqual(actual, expected)

    def test_split_blocks(self):
        acutal=app.qrCode(text_input='Hello, world! 123', ecc_level='low').split_blocks()
        expected:list=['0x41', '0x14', '0x86', '0x56', '0xc6', '0xc6', '0xf2', '0xc2', '0x7', '0x76', '0xf7', '0x26', '0xc6', '0x42', '0x12', '0x3', '0x13', '0x23', '0x30']

        self.assertEqual(acutal, expected)

    def test_error_correction(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low').error_correction()
        expected:list=['0x85', '0xa9', '0x5e', '0x7', '0xa', '0x36', '0xc9']

        self.assertEqual(actual, expected)

    def test_add_ecc_to_concatenated_data(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low').add_ecc_to_concatenated_data()
        expected:str='0100000100010100100001100101011011000110110001101111001011000010000001110111011011110111001001101100011001000010000100100000001100010011001000110011000010000101101010010101111000000111000010100011011011001001'

        self.assertEqual(actual, expected)

    def test_zig_zag_pattern(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low').zig_zag_pattern()
        expected:list=[
            (20,20), (20,19), (19,20), (19,19), (18,20), (18,19),
            (17,20), (17,19), (16,20), (16,19), (15,20), (15,19),
            (14,20), (14,19), (13,20), (13,19), (12,20), (12,19),
            (11,20), (11,19), (10,20), (10,19), (9,20), (9,19),
            (9,18), (9,17), (10,18), (10,17), (11,18), (11,17),
            (12,18), (12,17), (13,18), (13,17), (14,18), (14,17),
            (15,18), (15,17), (16,18), (16,17), (17,18), (17,17),
            (18,18), (18,17), (19,18), (19,17), (20,18), (20,17),
            (20,16), (20,15), (19,16), (19,15), (18,16), (18,15),
            (17,16), (17,15), (16,16), (16,15), (15,16), (15,15),
            (14,16), (14,15), (13,16), (13,15), (12,16), (12,15),
            (11,16), (11,15), (10,16), (10,15), (9,16), (9,15),
            (9,14), (9,13), (10,14), (10,13), (11,14), (11,13),
            (12,14), (12,13), (13,14), (13,13), (14,14), (14,13),
            (15,14), (15,13), (16,14), (16,13), (17,14), (17,13),
            (18,14), (18,13), (19,14), (19,13), (20,14), (20,13),
            (20,12), (20,11), (19,12), (19,11), (18,12), (18,11),
            (17,12), (17,11), (16,12), (16,11), (15,12), (15,11),
            (14,12), (14,11), (13,12), (13,11), (12,12), (12,11),
            (11,12), (11,11), (10,12), (10,11), (9,12), (9,11),
            (8,12), (8,11), (7,12), (7,11), (5,12), (5,11),
            (4,12), (4,11), (3,12), (3,11), (2,12), (2,11),
            (1,12), (1,11), (0,12), (0,11), (0,10), (0,9),
            (1,10), (1,9), (2,10), (2,9), (3,10), (3,9),
            (4,10), (4,9), (5,10), (5,9), (7,10), (7,9),
            (8,10), (8,9), (9,10), (9,9), (10,10), (10,9), 
            (11,10), (11,9), (12,10), (12,9), (13,10), (13,9),
            (14,10), (14,9), (15,10), (15,9), (16,10), (16,9),
            (17,10), (17,9), (18,10), (18,9), (19,10), (19,9),
            (20,10), (20,9), (12,8), (12,7), (11,8), (11,7),
            (10,8), (10,7), (9,8), (9,7), (9,5), (9,4),
            (10,5), (10,4), (11,5), (11,4), (12,5), (12,4),
            (12,3), (12,2), (11,3), (11,2), (10,3), (10,2),
            (9,3), (9,2), (9,1), (9,0), (10,1), (10,0),
            (11,1), (11,0), (12,1), (12,0)
        ]
        
        self.assertEqual(actual, expected)

    def test_draw_data(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low').draw_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', ' ', ' ', '#'],
            [' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' '],
            [' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_mask_bool_0(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=0).masking_bool(i=i, j=j))

        actual=test
        expected=[True, False, False, True, False]

        self.assertEqual(actual, expected)

    def test_mask_bool_1(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=1).masking_bool(i=i, j=j))

        actual=test
        expected=[True, True, False, False, False]

        self.assertEqual(actual, expected)

    def test_mask_bool_2(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=2).masking_bool(i=i, j=j))

        actual=test
        expected=[False, True, True, False, True]

        self.assertEqual(actual, expected)

    def test_mask_bool_3(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=3).masking_bool(i=i, j=j))

        actual=test
        expected=[False, False, False, True, False]

        self.assertEqual(actual, expected)

    def test_mask_bool_4(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=4).masking_bool(i=i, j=j))

        actual=test
        expected=[True, True, True, False, True]

        self.assertEqual(actual, expected)

    def test_mask_bool_5(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=5).masking_bool(i=i, j=j))

        actual=test
        expected=[False, True, True, False, True]

        self.assertEqual(actual, expected)

    def test_mask_bool_6(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=6).masking_bool(i=i, j=j))

        actual=test
        expected=[False, True, True, False, True]

        self.assertEqual(actual, expected)

    def test_mask_bool_7(self):
        cases:list=[(20,20), (14,15), (17,18), (13,11), (13,12)]
        test:list=[]

        for case in cases:
            i=case[0]
            j=case[1]
            test.append(app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=7).masking_bool(i=i, j=j))

        actual=test
        expected=[False, False, False, True, False]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_0(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=0).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', '#'],
            ['#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' '],
            [' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', ' ', '#', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_1(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=1).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', ' ', ' ', '#'],
            ['#', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'],
            [' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' '],
            [' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', '#', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_2(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=2).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', '#', '#', '#', ' '],
            ['#', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', ' ', ' '],
            [' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#', '#', '#', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_3(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=3).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', '#'],
            [' ', ' ', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' '],
            [' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', ' ', '#', '#', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_4(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=4).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', ' '],
            [' ', ' ', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', ' ', '#', ' ', ' ', '#', ' '],
            [' ', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' '],
            [' ', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', ' ', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' ', '#', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', '#']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_5(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=5).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', ' ', ' '],
            ['#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', '#', '#', '#', ' '],
            ['#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', ' ', ' ', '#', '#', ' ', ' '],
            [' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_6(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=6).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', '#', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', ' ', ' '],
            ['#', ' ', ' ', '#', ' ', '#', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#'],
            ['#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', ' ', '#', ' ', ' '],
            [' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', '#', '#', '#', '#', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_apply_masking_to_data_7(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=7).apply_masking_to_data()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', '#'],
            ['#', '#', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', ' ', '#', '#'],
            [' ', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' ', '#', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' ', '#', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_draw_format_bits(self):
        actual=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=3).draw_format_bits()
        expected=[
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', '#', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', '#', ' ', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#'],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', '#', ' ', '#', ' ', '#', '#', '#', '#', '#', '#', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', '#'],
            [' ', '#', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ', '#', '#', '#', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#', ' ', ' ', ' ', '#', '#'],
            [' ', ' ', '#', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', '#', ' '],
            [' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', ' ', ' ', ' ', ' ', '#'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', ' ', '#', ' ', '#', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', '#', ' ', '#', '#', '#', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#'],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', '#', '#', ' ', '#', '#', ' ', ' ', ' ', '#', '#', ' ', ' '],
            ['#', ' ', '#', '#', '#', ' ', '#', ' ', '#', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#', ' ', ' '],
            ['#', ' ', ' ', ' ', ' ', ' ', '#', ' ', '#', '#', '#', '#', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#'],
            ['#', '#', '#', '#', '#', '#', '#', ' ', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', '#', ' ', ' ']
        ]

        self.assertEqual(actual, expected)

    def test_calculate_penalty_first(self):
        possible_masks:list=[0, 1, 2, 3, 4, 5, 6, 7]
        penalty_dict:dict={}

        for mask in possible_masks:
            penalty_dict[mask]=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=mask).calculate_penalty_first()
        
        actual:dict=penalty_dict
        expected={
            0:205,
            1:187,
            2:173,
            3:167,
            4:195,
            5:181,
            6:183,
            7:183
        }

        self.assertEqual(actual, expected)

    def test_calculate_penalty_second(self):
        possible_masks:list=[0, 1, 2, 3, 4, 5, 6, 7]
        penalty_dict:dict={}

        for mask in possible_masks:
            penalty_dict[mask]=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=mask).calculate_penalty_second()
        
        actual:dict=penalty_dict
        expected={
            0:159,
            1:147,
            2:111,
            3:114,
            4:126,
            5:159,
            6:126,
            7:114
        }

        self.assertEqual(actual, expected)

    def test_calculate_penalty_third(self):
        possible_masks:list=[0, 1, 2, 3, 4, 5, 6, 7]
        penalty_dict:dict={}

        for mask in possible_masks:
            penalty_dict[mask]=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=mask).calculate_penalty_third()
        
        actual:dict=penalty_dict
        expected={
            0:840,
            1:800,
            2:800,
            3:800,
            4:800,
            5:760,
            6:880,
            7:840
        }

        self.assertEqual(actual, expected)

    ### Commenting out these tests as functionality is working correctly
    ### but I am not able to find appropriate test case
    
    # def test_calculate_penalty_fourth(self):
    #     possible_masks:list=[0, 1, 2, 3, 4, 5, 6, 7]
    #     penalty_dict:dict={}

    #     for mask in possible_masks:
    #         penalty_dict[mask]=app.qrCode(text_input='Hello, world! 123', ecc_level='low', masking_pattern=mask).calculate_penalty_fourth()
        
    #     actual:dict=penalty_dict
    #     expected={
    #         0:0,
    #         1:0,
    #         2:0,
    #         3:0,
    #         4:0,
    #         5:0,
    #         6:0,
    #         7:0
    #     }

    #     self.assertEqual(actual, expected)

    # def test_calculate_penalty(self):
    #     actual:dict=app.qrCode(text_input='Hello, world! 123', ecc_level='low').calculate_penalty()
    #     expected:dict={
    #         0:1204,
    #         1:1134,
    #         2:1084,
    #         3:1081,
    #         4:1121,
    #         5:1100,
    #         6:1189,
    #         7:1137
    #     }

    #     self.assertEqual(actual, expected)

if __name__ == '__main__':
    unittest.main()